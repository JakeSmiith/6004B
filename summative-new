// Extracting files from zip folder
clear
cd "C:\Users\jakes\Downloads"
cap shell rmdir /s /q "Summative 001 Data"
unzipfile "Summative 001 Data (2).zip", replace

// Importing and appending all 23 cryptocurrencies. 
cd "C:\Users\jakes\Downloads\Summative 001 Data"
local tickers Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP
local N = wordcount("`tickers'")
local first = 1
forvalues i = 1/`N' {
    local coin : word `i' of `tickers'
    import delimited using "coin_`coin'.csv", clear stringcols(_all) encoding(utf8)
    gen crypto = "`coin'"
    if `first' {
        save panel.dta, replace
        local first = 0
    }
    else {
        append using panel.dta
        save panel.dta, replace
    }
}

// Sense-checking
codebook _all, compact
tab crypto
tab date if crypto=="Aave"

//Informing STATA we have an unbalanced panel
use panel.dta, clear
rename date datestr
generate date = date(substr(datestr,1,10),"YMD")
format date %tdDD/NN/CCYY
drop datestr
encode crypto, gen(crypto_id)
xtset crypto_id date
xtdescribe
levelsof crypto_id, local(ids)
foreach id of local ids {
    di as text "=== crypto_id = `id' ==="
    preserve
      keep if crypto_id==`id'
      tsreport
    restore
}

// Recompute daily returns
capture drop ret
destring close, replace ignore(",")
sort crypto_id date
bysort crypto_id: gen ret = (close - close[_n-1]) / close[_n-1]
drop if missing(ret)

// Compute cross‐sectional volatility
egen sd_ret = sd(ret), by(crypto)

// Split into high‐ and low‐volatility halves
preserve
keep crypto sd_ret
duplicates drop
gsort -sd_ret
count
local N = r(N)
local half  = ceil(`N'/2)
local start = `half' + 1
levelsof crypto in 1/`half',      local(highvol)
levelsof crypto in `start'/`N',   local(lowvol)
restore

// Create a winsorised plotting variable capped at ±0.4
clonevar ret_plot = ret
replace ret_plot =  0.4 if ret_plot >  0.4
replace ret_plot = -0.4 if ret_plot < -0.4

// Switch to the s1color scheme
set scheme s1color

// High‐volatility coins
local ts_high_list  ""
local hist_high_list ""
foreach coin of local highvol {
    tsline ret_plot if crypto=="`coin'", name(ts_high_`coin', replace) title("`coin' Daily Returns", size(small)) xtitle("Date", size(vsmall)) ytitle("Return", size(vsmall)) xlabel(, format(%tdCY) angle(45) labsize(vsmall) grid) ylabel(-0.4(0.05)0.4, labsize(vsmall)) legend(off)
    histogram ret_plot if crypto=="`coin'", name(hist_high_`coin', replace) percent normal title("`coin' Return Distribution", size(small)) xtitle("Return", size(vsmall)) ytitle("Percent", size(vsmall)) xlabel(-0.4(0.05)0.4, labsize(vsmall) grid) xscale(range(-0.4 0.4)) ylabel(, labsize(vsmall)) legend(off)
    local ts_high_list  "`ts_high_list' ts_high_`coin'"
    local hist_high_list "`hist_high_list' hist_high_`coin'"
}
graph combine `ts_high_list', cols(5) name(ts_high, replace) title("Daily Returns: High-Volatility Cryptocurrencies", size(medium))
graph export "HighVol_DailyReturns.png", replace width(2000) height(1000)

graph combine `hist_high_list', cols(5) name(hist_high, replace) title("Return Distributions: High-Volatility Cryptocurrencies", size(medium))
graph export "HighVol_Distributions.png", replace width(2000) height(1000)


// Low‐volatility coins
local ts_low_list  ""
local hist_low_list ""
foreach coin of local lowvol {
    tsline ret_plot if crypto=="`coin'", name(ts_low_`coin', replace) title("`coin' Daily Returns", size(small)) xtitle("Date", size(vsmall)) ytitle("Return", size(vsmall)) xlabel(, format(%tdCY) angle(45) labsize(vsmall) grid) ylabel(-0.4(0.05)0.4, labsize(vsmall)) legend(off)
    histogram ret_plot if crypto=="`coin'", name(hist_low_`coin', replace) percent normal title("`coin' Return Distribution", size(small)) xtitle("Return", size(vsmall)) ytitle("Percent", size(vsmall)) xlabel(-0.4(0.05)0.4, labsize(vsmall) grid) xscale(range(-0.4 0.4)) ylabel(, labsize(vsmall)) legend(off)
    local ts_low_list  "`ts_low_list' ts_low_`coin'"
    local hist_low_list "`hist_low_list' hist_low_`coin'"
}
graph combine `ts_low_list', cols(5) name(ts_low, replace) title("Daily Returns: Low-Volatility Cryptocurrencies", size(medium))
graph export "LowVol_DailyReturns.png", replace width(2000) height(1000)

graph combine `hist_low_list', cols(5) name(hist_low, replace) title("Return Distributions: Low-Volatility Cryptocurrencies", size(medium))
graph export "LowVol_Distributions.png", replace width(2000) height(1000)


// Testing for normality through Jarque-Bera test
levelsof crypto, local(coins)
di "=== Jarque–Bera Tests of Return Normality ==="
foreach c of local coins {
    display as text "### `c' ###"
    sktest ret if crypto=="`c'"
}

// Calculating mean, stdev, and Sharpe Ratio
egen mean_ret = mean(ret), by(crypto)
egen sd_ret   = sd(ret),   by(crypto)
gen  sharpe   = mean_ret/sd_ret
format mean_ret sd_ret sharpe %9.4f

preserve
collapse (mean) mean_ret=ret (sd) sd_ret=ret, by(crypto)
gen sharpe = mean_ret/sd_ret
mkmat mean_ret sd_ret sharpe, matrix(M) rownames(crypto)
matrix colnames M = Mean_Return Std_Dev Sharpe_Ratio
esttab matrix(M) using "SummaryStats.rtf", replace noobs nonumber b(2)
restore

gen extreme_ret = abs(ret) > 0.4
bysort crypto (date): egen extreme_count = total(extreme_ret)
bysort crypto (extreme_count): keep if _n == 1
list crypto extreme_count, sepby(crypto)


// Durbin-Watson test to check for autocorrelation of daily returns. 
preserve
capture drop cons
gen cons = 1
tempfile stats
postfile sf str20 crypto jb_chi2 jb_p dw_d using `stats', replace
levelsof crypto, local(coins)
foreach c of local coins {
    quietly sktest ret if crypto=="`c'"
    local chi2 = r(chi2)
    local p    = chi2tail(2, `chi2')
    quietly regress ret cons if crypto=="`c'"
    quietly estat dwatson
    local d    = r(dw)
    post sf ("`c'") (`chi2') (`p') (`d')
}
postclose sf
drop cons
use `stats', clear
mkmat jb_chi2 jb_p dw_d, matrix(TESTS) rownames(crypto)
matrix colnames TESTS = "JB χ²" "JB p-value" "Durbin–Watson d"
ssc install estout, replace
esttab matrix(TESTS) using "JB_DW_Table.rtf", replace title("Jarque–Bera & Durbin–Watson Tests") noobs nonumber nomtitles b(4)
restore

// Heatplot for correlations between variables
preserve
keep date crypto ret
reshape wide ret, i(date) j(crypto) string
corr ret*
matrix R = r(C)
matrix rownames R = Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP
matrix colnames R = Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP
ssc install heatplot, replace
set scheme s2color
heatplot R, title("Cryptocurrency Return Correlations") xlabel(, valuelabel angle(45) labsize(small)) ylabel(, valuelabel labsize(small)) color(Blues) graphregion(color(white)) plotregion(color(white))
restore

/// Task 2 
cd "C:\Users\jakes\Downloads\Summative 001 Data"
use "panel.dta", clear

capture confirm numeric variable marketcap
if _rc destring marketcap, replace ignore(",") force
capture confirm numeric variable close
if _rc destring close,     replace ignore(",") force
capture confirm numeric variable date
if _rc {
    rename date datestr
    gen date = date(substr(datestr,1,10),"YMD")
    format date %tdDD/NN/CCYY
    drop datestr
}
encode crypto, gen(crypto_id)
label var crypto_id "Crypto ID"
xtset crypto_id date

bysort crypto_id (date): gen ret = (close - close[_n-1]) / close[_n-1]
drop if missing(ret)
egen mean_ret = mean(ret), by(crypto)
egen sd_ret   = sd(ret),   by(crypto)
gen  sharpe  = mean_ret / sd_ret
format mean_ret sd_ret sharpe %9.4f

bysort crypto_id (date): gen cap_lag = marketcap[_n-1]
drop if missing(cap_lag)
bysort date: egen total_cap_lag = total(cap_lag)
gen w = cap_lag / total_cap_lag
label var w "Lagged value-weight"

bysort date: egen sum_w = total(w)
summ sum_w, meanonly
display "Min sum_w=" r(min) "  Max sum_w=" r(max)

bysort date: egen mkt_ret = total(w * ret)
label var mkt_ret "Value-weighted market return"

preserve
    keep date mkt_ret
    duplicates drop date, force
    sort date
    gen mkt_index = 100
    quietly count
    local N = r(N)
    forvalues i = 2/`N' {
        replace mkt_index = mkt_index[_n-1]*(1+mkt_ret) in `i'
    }
    tempfile idx
    save `idx', replace
restore

merge m:1 date using `idx'
drop _merge
label var mkt_index "VW Crypto Index (base=100)"

save "panel_with_index.dta", replace
quietly statsby beta=_b[mkt_ret] se=_se[mkt_ret], by(crypto) saving(betas_full.dta, replace): regress ret mkt_ret

use betas_full.dta, clear
encode crypto, gen(crypto_id)
save betas_full.dta, replace

///
use "panel_with_index.dta", clear
bysort crypto_id (date): gen cap_lag = marketcap[_n-1]
drop if missing(cap_lag)
bysort crypto_id: egen avg_mcap = mean(cap_lag)
duplicates drop crypto_id, force

summarize avg_mcap, detail
local med = r(p50)

gen cap_grp = cond(avg_mcap <= `med', 1, 2)
label define capgrp 1 "Low-Cap" 2 "High-Cap"
label values cap_grp capgrp

preserve
keep crypto_id cap_grp
save "crypto_capgrp.dta", replace
restore
dir *.dta

gen ln_mcap = ln(avg_mcap)
regress beta ln_mcap, robust
estimates store SizeBeta
scatter beta ln_mcap, msize(tiny) msymbol(o) title("Full-Sample β vs. log(Avg Lagged Market-Cap)") xtitle("ln(Avg Lagged Market-Cap)") ytitle("Full-Sample β") xlabel(, labsize(small)) ylabel(, labsize(small)) legend(off)


use "betas_full.dta", clear
encode crypto, gen(crypto_num) label(crypto_lbl)
gen str lab = string(beta, "%5.2f") + " (" + string(se, "%5.2f") + ")"
gsort -beta
gen order = _n
label define orderlbl
quietly {
    forvalues i = 1/`=_N' {
        local nm = crypto[`i']
        label define orderlbl `i' "`nm'", add
    }
}
label values order orderlbl

twoway (bar beta order, barwidth(0.8)) (scatter beta order, msymbol(none) mlabel(lab) mlabposition(0) mlabsize(vsmall) mlabcolor(black) mlabangle(45) mlabgap(2)), title("Full-Sample β by Cryptocurrency") ylabel(0(.1)1.5, labsize(vsmall)) xlabel(1(1)`=_N', valuelabel angle(45) labsize(vsmall)) xtitle("Cryptocurrency") ytitle("β") legend(off) graphregion(color(white)) bgcolor(white)


use "panel_with_index.dta", clear
xtset crypto_id date
capture which rangestat
if _rc ssc install rangestat, replace

// Preparing temp file to 
tempfile voldata

// Creating base file
local w = 30
local l = `w' - 1
di as txt "----> Rolling-window = `w' days (offset = `l')"
rangestat (reg) ret mkt_ret, interval(date -`l' 0) by(crypto_id)
rename b_mkt_ret   beta30
keep if reg_nobs==`w'
bysort crypto_id: egen beta_vol30 = sd(beta30)
keep crypto_id beta_vol30
duplicates drop
save `voldata', replace

// Looping other windows, merging on to the master
foreach w in 60 120 {
    local l = `w' - 1
    di as txt "----> Rolling-window = `w' days (offset = `l')"

    use "panel_with_index.dta", clear
    xtset crypto_id date
    
    rangestat (reg) ret mkt_ret, interval(date -`l' 0) by(crypto_id)
    rename b_mkt_ret   beta`w'
    keep if reg_nobs==`w'
    bysort crypto_id: egen beta_vol`w' = sd(beta`w')
    keep crypto_id beta_vol`w'
    duplicates drop

    * merge this window’s vol onto the master voldata
    merge 1:1 crypto_id using `voldata'
    drop _merge
    save `voldata', replace
}

// Displaying side-by-side volatilities
use `voldata', clear
label var beta_vol30  "Vol β (30d)"
label var beta_vol60  "Vol β (60d)"
label var beta_vol120 "Vol β (120d)"
list crypto_id beta_vol30 beta_vol60 beta_vol120, noobs clean

use "panel_with_index.dta", clear
keep crypto crypto_id
duplicates drop crypto_id, force
tempfile names
save `names', replace

use `voldata', clear
merge 1:1 crypto_id using `names'
drop _merge
tempfile vol_named
save `vol_named', replace

use "betas_full.dta", clear
merge 1:1 crypto using `vol_named'
drop _merge
save combined_stats.dta, replace

use combined_stats.dta, clear
label var crypto        "Crypto"
label var beta          "Full‐sample β"
label var se            "SE(β)"
label var beta_vol30    "Vol β (30 days)"
label var beta_vol60    "Vol β (60 days)"
label var beta_vol120   "Vol β (120 days)"
save combined_stats.dta, replace

mkmat beta beta_vol30 beta_vol60 beta_vol120, matrix(M) rownames(crypto)
matrix colnames M = "Full-sample β" "Vol β (30 days)" "Vol β (60 days)" "Vol β (120 days)"
ssc install estout, replace
esttab matrix(M) using "CryptoBetas.rtf", replace title("Cryptocurrency Betas & Rolling-Window Volatilities") noobs nonumber nomtitles b(4)

use "panel_with_index.dta", clear
xtset crypto_id date
capture which rangestat
if _rc ssc install rangestat, replace

preserve
  rangestat (reg) ret mkt_ret, interval(date -29 0) by(crypto_id)
  rename b_mkt_ret beta30d
  keep crypto_id date beta30d
  tempfile b30
  save `b30', replace
restore

preserve
  rangestat (reg) ret mkt_ret, interval(date -59 0) by(crypto_id)
  rename b_mkt_ret beta60d
  keep crypto_id date beta60d
  tempfile b60
  save `b60', replace
restore

preserve
  rangestat (reg) ret mkt_ret, interval(date -89 0) by(crypto_id)
  rename b_mkt_ret beta90d
  keep crypto_id date beta90d
  tempfile b90
  save `b90', replace
restore

use `b30', clear
merge 1:1 crypto_id date using `b60'
drop _merge
merge 1:1 crypto_id date using `b90'
drop _merge
save "rolling_beta_30_60_90.dta", replace

use "rolling_beta_30_60_90.dta", clear
merge 1:1 crypto_id date using "panel_with_index.dta", keepusing(crypto)
drop _merge

levelsof crypto, local(coins)

foreach c of local coins {
    preserve
    keep if crypto == "`c'"
    sort date
    local safe = subinstr("`c'", " ", "_", .)
    twoway line beta30d date || line beta60d date || line beta90d date, name(rolling_`safe', replace) title("Rolling β: `c' (30d vs 60d vs 90d)") xtitle("Date") ytitle("β") legend(order(1 "30-day" 2 "60-day" 3 "90-day") pos(6)) xlabel(, format(%tdMon_CCYY) angle(45)) graphregion(color(white)) bgcolor(white)
    graph save rolling_beta30_60_90_`safe'.gph, replace
    graph export rolling_beta30_60_90_`safe'.png, replace width(1200)
    restore
}

// Combining graphs
use "rolling_beta_30_60_90.dta", clear
merge 1:1 crypto_id date using "panel_with_index.dta", keepusing(crypto)
drop _merge
merge m:1 crypto_id using "crypto_capgarp.dta"
drop _merge

levelsof crypto if cap_grp==1, local(lowcoins)
levelsof crypto if cap_grp==2, local(highcoins)

local lowgraphs ""
foreach c of local lowcoins {
    local safe = subinstr("`c'", " ", "_", .)
    local lowgraphs "`lowgraphs' rolling_beta30_60_90_`safe'.gph"
}

local highgraphs ""
foreach c of local highcoins {
    local safe = subinstr("`c'", " ", "_", .)
    local highgraphs "`highgraphs' rolling_beta30_60_90_`safe'.gph"
}

graph combine `lowgraphs', cols(4) name(rolling_lowcaps, replace) title("Rolling β (30/60/90d): Low-Cap Cryptos")
graph save "RollingBeta_LowCap.gph", replace

graph combine `highgraphs', cols(4) name(rolling_highcaps, replace) title("Rolling β (30/60/90d): High-Cap Cryptos")
graph save "RollingBeta_HighCap.gph", replace



