// Extracting files from zip folder
clear
cd "C:\Users\jakes\Downloads"
cap shell rmdir /s /q "Summative 001 Data"
unzipfile "Summative 001 Data (2).zip", replace

// Importing and appending all 23 cryptocurrencies. 
cd "C:\Users\jakes\Downloads\Summative 001 Data"
local tickers Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP
local N = wordcount("`tickers'")
local first = 1
forvalues i = 1/`N' {
    local coin : word `i' of `tickers'
    import delimited using "coin_`coin'.csv", clear stringcols(_all) encoding(utf8)
    gen crypto = "`coin'"
    if `first' {
        save panel.dta, replace
        local first = 0
    }
    else {
        append using panel.dta
        save panel.dta, replace
    }
}

// Sense-checking
codebook _all, compact
tab crypto
tab date if crypto=="Aave"

//Informing STATA we have an unbalanced panel
use panel.dta, clear
rename date datestr
generate date = date(substr(datestr,1,10),"YMD")
format date %tdDD/NN/CCYY
drop datestr
encode crypto, gen(crypto_id)
xtset crypto_id date
xtdescribe
levelsof crypto_id, local(ids)
foreach id of local ids {
    di as text "=== crypto_id = `id' ==="
    preserve
      keep if crypto_id==`id'
      tsreport
    restore
}

// Computing daily returns
destring close, replace ignore(",")
bysort crypto_id (date): gen ret = (close - close[_n-1]) / close[_n-1]
drop if missing(ret)
tsline ret if crypto=="Bitcoin", title("Bitcoin Daily Returns") xtitle("Date") ytitle("Return")
histogram ret if crypto=="Bitcoin", percent normal title("Bitcoin Return Distribution")

// Time-series of returns - Loop
set scheme s1color
local tickers Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP

// Time-series returns
foreach coin of local tickers {
    tsline ret if crypto=="`coin'", name(ts_`coin', replace) title("`coin' Daily Returns") xtitle("Date") ytitle("Return") xlabel(, format(%tdDD/NN/CCYY) angle(45) grid) ylabel(-0.4(0.1)0.4) legend(off)
}

// Distribution of returns
foreach coin of local tickers {
    histogram ret if crypto=="`coin'", name(hist_`coin', replace) percent normal title("`coin' Return Distribution") xtitle("Return") ytitle("Percent") xlabel(-0.4(0.1)0.4) legend(off)
}

// Combined graph
graph combine ts_Aave ts_BinanceCoin ts_Bitcoin ts_Cardano ts_ChainLink ts_Cosmos ts_CryptocomCoin ts_Dogecoin ts_EOS ts_Ethereum ts_Iota ts_Litecoin ts_Monero ts_NEM ts_Polkadot ts_Solana ts_Stellar ts_Tether ts_Tron ts_USDcoin ts_Uniswap ts_WrappedBitcoin ts_XRP, cols(5) name(ts_all, replace) title("Daily Returns: All 23 Cryptocurrencies")

// Combined return distribution
local hists
foreach coin of local tickers {
    local hists "`hists' hist_`coin'"
}
graph combine `hists', cols(5) name(hist_all, replace) title("Return Distributions: All 23 Cryptocurrencies")

// Testing for normality through Jarque-Bera test
levelsof crypto, local(coins)
display "=== Jarque–Bera Tests of Return Normality ==="
foreach c of local coins {
    display as text "### `c' ###"
    sktest ret if crypto=="`c'"
}

// Calculating mean, stdev, and Sharpe Ratio
egen mean_ret = mean(ret), by(crypto)
egen sd_ret   = sd(ret),   by(crypto)
gen  sharpe   = mean_ret/sd_ret
format mean_ret sd_ret sharpe %9.4f


collapse (mean) mean_ret=ret (sd) sd_ret=ret, by(crypto)
gen sharpe = mean_ret/sd_ret
mkmat mean_ret sd_ret sharpe, matrix(M) rownames(crypto)
matrix colnames M = Mean_Return Std_Dev Sharpe_Ratio
esttab matrix(M) using "SummaryStats.rtf", replace noobs nonumber b(2)

// Durbin-Watson test to check for autocorrelation of daily returns. 
capture drop cons
gen cons = 1
tempfile stats
postfile sf str20 crypto jb_chi2 jb_p dw_d using `stats', replace
levelsof crypto, local(coins)
foreach c of local coins {
    quietly sktest ret if crypto=="`c'"
    local chi2 = r(chi2)
    local p    = chi2tail(2, `chi2')

    quietly regress ret cons if crypto=="`c'"
    quietly estat dwatson
    local d    = r(dw)

    post sf ("`c'") (`chi2') (`p') (`d')
}
postclose sf
drop cons
use `stats', clear
mkmat jb_chi2 jb_p dw_d, matrix(TESTS) rownames(crypto)
matrix colnames TESTS = "JB χ²" "JB p-value" "Durbin–Watson d"
ssc install estout, replace
esttab matrix(TESTS) using "JB_DW_Table.rtf", replace title("Jarque–Bera & Durbin–Watson Tests") noobs nonumber nomtitles b(4)


// Heatplot for correlations between variables
preserve
    keep date crypto ret
    reshape wide ret, i(date) j(crypto) string
    corr ret*
    matrix R = r(C)
    ssc install heatplot, replace
    heatplot R
restore


/// Task 2 
cd "C:\Users\jakes\Downloads\Summative 001 Data"
use "panel.dta", clear

capture confirm numeric variable marketcap
if _rc destring marketcap, replace ignore(",") force
capture confirm numeric variable close
if _rc destring close,     replace ignore(",") force
capture confirm numeric variable date
if _rc {
    rename date datestr
    gen date = date(substr(datestr,1,10),"YMD")
    format date %tdDD/NN/CCYY
    drop datestr
}
encode crypto, gen(crypto_id)
label var crypto_id "Crypto ID"
xtset crypto_id date

bysort crypto_id (date): gen ret = (close - close[_n-1]) / close[_n-1]
drop if missing(ret)
egen mean_ret = mean(ret), by(crypto)
egen sd_ret   = sd(ret),   by(crypto)
gen  sharpe  = mean_ret / sd_ret
format mean_ret sd_ret sharpe %9.4f

bysort crypto_id (date): gen cap_lag = marketcap[_n-1]
drop if missing(cap_lag)
bysort date: egen total_cap_lag = total(cap_lag)
gen w = cap_lag / total_cap_lag
label var w "Lagged value-weight"

bysort date: egen sum_w = total(w)
summ sum_w, meanonly
display "Min sum_w=" r(min) "  Max sum_w=" r(max)

bysort date: egen mkt_ret = total(w * ret)
label var mkt_ret "Value-weighted market return"

preserve
    keep date mkt_ret
    duplicates drop date, force
    sort date
    gen mkt_index = 100
    quietly count
    local N = r(N)
    forvalues i = 2/`N' {
        replace mkt_index = mkt_index[_n-1]*(1+mkt_ret) in `i'
    }
    tempfile idx
    save `idx', replace
restore

merge m:1 date using `idx'
drop _merge
label var mkt_index "VW Crypto Index (base=100)"

save "panel_with_index.dta", replace
quietly statsby beta=_b[mkt_ret] se=_se[mkt_ret], by(crypto) saving(betas_full.dta, replace): regress ret mkt_ret

use "betas_full.dta", clear
label var beta "Full-sample β"
label var se   "SE(β)"
list crypto beta se, noobs clean

use "panel_with_index.dta", clear
xtset crypto_id date
capture which rangestat
if _rc ssc install rangestat, replace

// Preparing temp file to 
tempfile voldata

// Creating base file
local w = 30
local l = `w' - 1
di as txt "----> Rolling-window = `w' days (offset = `l')"
rangestat (reg) ret mkt_ret, interval(date -`l' 0) by(crypto_id)
rename b_mkt_ret   beta30
keep if reg_nobs==`w'
bysort crypto_id: egen beta_vol30 = sd(beta30)
keep crypto_id beta_vol30
duplicates drop
save `voldata', replace

// Looping other windows, merging on to the master
foreach w in 60 120 {
    local l = `w' - 1
    di as txt "----> Rolling-window = `w' days (offset = `l')"

    use "panel_with_index.dta", clear
    xtset crypto_id date
    
    rangestat (reg) ret mkt_ret, interval(date -`l' 0) by(crypto_id)
    rename b_mkt_ret   beta`w'
    keep if reg_nobs==`w'
    bysort crypto_id: egen beta_vol`w' = sd(beta`w')
    keep crypto_id beta_vol`w'
    duplicates drop

    * merge this window’s vol onto the master voldata
    merge 1:1 crypto_id using `voldata'
    drop _merge
    save `voldata', replace
}

// Displaying side-by-side volatilities
use `voldata', clear
label var beta_vol30  "Vol β (30d)"
label var beta_vol60  "Vol β (60d)"
label var beta_vol120 "Vol β (120d)"
list crypto_id beta_vol30 beta_vol60 beta_vol120, noobs clean

use "panel_with_index.dta", clear
keep crypto crypto_id
duplicates drop crypto_id, force       // ← need the ", force" here
tempfile names
save `names', replace

use `voldata', clear
merge 1:1 crypto_id using `names'
drop _merge
tempfile vol_named
save `vol_named', replace

use "betas_full.dta", clear
merge 1:1 crypto using `vol_named'
drop _merge
save combined_stats.dta, replace

use combined_stats.dta, clear
label var crypto        "Crypto"
label var beta          "Full‐sample β"
label var se            "SE(β)"
label var beta_vol30    "Vol β (30 days)"
label var beta_vol60    "Vol β (60 days)"
label var beta_vol120   "Vol β (120 days)"
save combined_stats.dta, replace

mkmat beta beta_vol30 beta_vol60 beta_vol120, matrix(M) rownames(crypto)
matrix colnames M = "Full-sample β" "Vol β (30 days)" "Vol β (60 days)" "Vol β (120 days)"
ssc install estout, replace
esttab matrix(M) using "CryptoBetas.rtf", replace title("Cryptocurrency Betas & Rolling-Window Volatilities") noobs nonumber nomtitles b(4)

