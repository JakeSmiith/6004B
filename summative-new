// Extracting files from zip folder
clear
cd "C:\Users\jakes\Downloads"
cap shell rmdir /s /q "Summative 001 Data"
unzipfile "Summative 001 Data (2).zip", replace

// Importing and appending all 23 cryptocurrencies. 
cd "C:\Users\jakes\Downloads\Summative 001 Data"
local tickers Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP
local N = wordcount("`tickers'")
local first = 1
forvalues i = 1/`N' {
    local coin : word `i' of `tickers'
    import delimited using "coin_`coin'.csv", clear stringcols(_all) encoding(utf8)
    gen crypto = "`coin'"
    if `first' {
        save panel.dta, replace
        local first = 0
    }
    else {
        append using panel.dta
        save panel.dta, replace
    }
}

// Sense-checking
codebook _all, compact
tab crypto
tab date if crypto=="Aave"

//Informing STATA we have an unbalanced panel
use panel.dta, clear
rename date datestr
generate date = date(substr(datestr,1,10),"YMD")
format date %tdDD/NN/CCYY
drop datestr
encode crypto, gen(crypto_id)
xtset crypto_id date
xtdescribe
levelsof crypto_id, local(ids)
foreach id of local ids {
    di as text "=== crypto_id = `id' ==="
    preserve
      keep if crypto_id==`id'
      tsreport
    restore
}

// Computing daily returns
destring close, replace ignore(",")
bysort crypto_id (date): gen ret = (close - close[_n-1]) / close[_n-1]
drop if missing(ret)
tsline ret if crypto=="Bitcoin", title("Bitcoin Daily Returns") xtitle("Date") ytitle("Return")
histogram ret if crypto=="Bitcoin", percent normal title("Bitcoin Return Distribution")

// Time-series of returns - Loop
set scheme s1color
local tickers Aave BinanceCoin Bitcoin Cardano ChainLink Cosmos CryptocomCoin Dogecoin EOS Ethereum Iota Litecoin Monero NEM Polkadot Solana Stellar Tether Tron USDcoin Uniswap WrappedBitcoin XRP

// Time-series returns
foreach coin of local tickers {
    tsline ret if crypto=="`coin'", name(ts_`coin', replace) title("`coin' Daily Returns") xtitle("Date") ytitle("Return") xlabel(, format(%tdDD/NN/CCYY) angle(45) grid) ylabel(-0.4(0.1)0.4) legend(off)
}

// Distribution of returns
foreach coin of local tickers {
    histogram ret if crypto=="`coin'", name(hist_`coin', replace) percent normal title("`coin' Return Distribution") xtitle("Return") ytitle("Percent") xlabel(-0.4(0.1)0.4) legend(off)
}

// Testing for normality through Jarque-Bera test
levelsof crypto, local(coins)
display "=== Jarqueâ€“Bera Tests of Return Normality ==="
foreach c of local coins {
    display as text "### `c' ###"
    sktest ret if crypto=="`c'"
}

// Calculating mean, stdev, and Sharpe Ratio
egen mean_ret = mean(ret), by(crypto)
egen sd_ret   = sd(ret),   by(crypto)
gen  sharpe   = mean_ret/sd_ret
format mean_ret sd_ret sharpe %9.4f
preserve
keep crypto mean_ret sd_ret sharpe
duplicates drop
list, noobs clean
restore






